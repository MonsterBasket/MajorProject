import { useEffect, useState } from 'react';
import './mapMaker.css';
import colliderImage from '../images/colliders.png'

function MapMaker(){
  const [x, setX] = useState(0);
  const [y, setY] = useState(0);
  const [previewX, setPreviewX] = useState(33);
  const [previewY, setPreviewY] = useState(63);
  const [layer, setLayer] = useState(1);
  const [nada, refresh] = useState([]);
  const [deleteTile, setDeleteTile] = useState(false);
  const [addCollider, setAddCollider] = useState(false);
  const [colliderValue, setColliderValue] = useState([["■"],[1,1]]);

  useEffect(() => {
    window.addEventListener("keydown", handleInput);
    // setCoords(mapCoords)
    return () => {window.removeEventListener("keydown", handleInput);};
  }, [])

  function handleInput(e){
    if(e.key == "ArrowRight")           return setX(prev=>prev - 16);
    if(e.key == "ArrowLeft")            return setX(prev=>prev + 16);
    if(e.key == "ArrowUp")              return setY(prev=>prev + 16);
    if(e.key == "ArrowDown")            return setY(prev=>prev - 16);
    if(e.key == "w" && previewY >= 0)   return setPreviewY(prev=>prev - 1);
    if(e.key == "s"&& previewY <= 209)  return setPreviewY(prev=>prev + 1);
    if(e.key == "a" && previewX >=0)    return setPreviewX(prev=>prev - 1);
    if(e.key == "d" && previewX <= 119) return setPreviewX(prev=>prev + 1);
    if(e.key == "q"){
      setDeleteTile(prev=>!prev);
      setAddCollider(false);
      setLayer(2);
    }
    if(e.key == "e"){
      setAddCollider(prev=>!prev);
      setDeleteTile(false);
    }
    if(e.code == "Numpad1") return setColliderValue([["◣"],[0,2]]);
    if(e.code == "Numpad2") return setColliderValue([["⬓"],[1,2]]);
    if(e.code == "Numpad3") return setColliderValue([["◢"],[2,2]]);
    if(e.code == "Numpad4") return setColliderValue([["◧"],[0,1]]);
    if(e.code == "Numpad5") return setColliderValue([["■"],[1,1]]);
    if(e.code == "Numpad6") return setColliderValue([["◨"],[2,1]]);
    if(e.code == "Numpad7") return setColliderValue([["◤"],[0,0]]);
    if(e.code == "Numpad8") return setColliderValue([["⬒"],[1,0]]);
    if(e.code == "Numpad9") return setColliderValue([["◥"],[2,0]]);
    if(e.code == "Numpad0") return setColliderValue([["X"],0]);

    if(e.key == "1")        return setLayer(1);
    if(e.key == "2")        return setLayer(2);
  }

  const movingMap = {
    left: `${x}px`,
    top: `${y}px`
  }
  const mapMakerPreview = {
    backgroundPosition: `${(previewX - 2) * -16}px ${(previewY - 2) * -16}px`
  }
  function childStyle(x, y) {
    const obj = {
      backgroundPosition: `${x * -16}px ${y * -16}px`}
    return obj
  }
  function secondChildStyle(x, y) {
    const obj = {
      backgroundPosition: `${x * -16}px ${y * -16}px`}
    return obj
  }
  function colliderStyle(x, y) {
    const obj = {
      position: "absolute",
      top: "0px",
      left: "0px",
      width: "100%",
      height: "100%",
      backgroundImage: `url(${colliderImage})`,
      backgroundPosition: `${x * -16}px ${y * -16}px`}
    return obj
  }
  const deleteTileStyle = {
    display: "inline-block",
    margin: "0px",
    width: "45%",
    height: "20px",
    background: `${deleteTile ? "red" : ""}`
  }
  const addColliderStyle = {
    display: "inline-block",
    margin: "0px",
    width: "45%",
    height: "20px",
    background: `${addCollider ? "green" : ""}`
}


  function changeTile(index){
    if(addCollider){
      console.log(`collider[0]: ${colliderValue[0]} - [1]: ${colliderValue[1]} - test: ${[1,2]}`)
      const newColliders = colliders;
      newColliders[index] = colliderValue[1];
      setColliders(newColliders)
    }
    else{
      const newArray = (layer == 1) ? coords : coords2;
      newArray[index] = deleteTile ? 0 : [previewX, previewY];
      layer == 1 ? setCoords(newArray) : setCoords2(newArray);
    }
    refresh([]);
  }

  function changeX(e){
    setPreviewX(e.target.valueAsNumber);
  }
  function changeY(e){
    setPreviewY(e.target.valueAsNumber)
  }

  function copyCoords(){
    navigator.clipboard.writeText(`const mapCoords = ${JSON.stringify(coords)};\nconst mapCoords2 = ${JSON.stringify(coords2)};\nconst mapColliders = ${JSON.stringify(colliders)};`)
  }

const mapCoords = [[32,62],[33,62],[34,62],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[32,63],[33,63],[34,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[32,64],[33,64],[34,64],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63],[33,63]];
const mapCoords2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[115,77],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const mapColliders = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[115,77],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,[99,79],[100,79],[101,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,[99,80],[100,80],[101,80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
  const [coords, setCoords] = useState(mapCoords)
  const [coords2, setCoords2] = useState(mapCoords2)
  const [colliders, setColliders] = useState(mapColliders)


  return <div className="parentStyle">
    <div className="movingMap" style={movingMap}>
      {coords.map((item, index) => <div key={index} className="childStyle" style={childStyle(item[0], item[1])} onClick={() => changeTile(index)}>
        {coords2[index] == 0 ? "" : <div className="secondChildStyle" style={secondChildStyle(coords2[index][0], coords2[index][1])}></div>}
        {colliders[index] == 0 ? "" : <div style={colliderStyle(colliders[index][0], colliders[index][1])}></div>}
      </div>)}
    </div>
    <div className="mapMaker">
      <div className="mapMakerContainer">
        <div className="mapMakerPreview" style={mapMakerPreview}>
          <div className="mapMakerBorder"></div>
        </div>
      </div>
      <input type="number" value={previewX} min="0" max="119" onChange={changeX} style={{width: "100px"}}/>
      <input type="number" value={previewY} min="0" max="209" onChange={changeY} style={{width: "100px"}}/>
      <button style={{width: "100%", height: "20px", overflow: "hidden"}} onClick={copyCoords}>Copy Coords</button>
      <div style={deleteTileStyle}>{`Layer ${layer}`}</div>
      <div style={addColliderStyle}>{`Collider ${colliderValue[0]}`}</div>
    </div>
  </div>
}

export default MapMaker;